apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "4"
  creationTimestamp: null
  generation: 1
  labels:
    run: cdd
  name: cdd
  selfLink: /apis/extensions/v1beta1/namespaces/default/deployments/cdd
spec:
  replicas: 1
  selector:
    matchLabels:
      run: cdd
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        run: cdd
    spec:
      containers:
      - envFrom:
        - configMapRef:
            name: cdd-eks
        image: averyniceday/cdd:cdd
        command: [ "java" ]
        args: ["-Ddesperateattempt=saywhat",
        "-Dtopbraid.knowledgeSystems.serviceUrl=http://test.evn.mskcc.org/edg/tbl/sparql",
        "-Dtopbraid.knowledgeSystems.loginUrl=http://test.evn.mskcc.org/edg/tbl/sparql",
        "-Dtopbraid.knowledgeSystems.username=$(TOPBRAID_USERNAME)",
        "-Dtopbraid.knowledgeSystems.password=$(TOPBRAID_PASSWORD)",
        "-Dtopbraid.knowledgeSystems.cddNamespacePrefix=http://data.mskcc.org/ontologies/ClinicalDataDictionary#",
        "-Dtopbraid.knowledgeSystems.cddGraphId=urn:x-evn-master:cdd",
        "-Dtopbraid.mskVocabulary.serviceUrl=http://dev.evn.mskcc.org/edg/api/projects",
        "-Dtopbraid.mskVocabulary.loginUrl=http://dev.evn.mskcc.org/edg/tbl/sparql",
        "-Dtopbraid.mskVocabulary.username=$(TOPBRAID_USERNAME)",
        "-Dtopbraid.mskVocabulary.password=$(TOPBRAID_PASSWORD)",
        "-Dslack.url=https://hooks.slack.com/services/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",
        "-DmskVocabulary.studyIdList=msk_extract_cohort2_2019",
        "-jar", 
        "cdd.jar"]
        imagePullPolicy: Always
        readinessProbe:
          httpGet:
            path: /swagger-ui.html 
            port: 8080
          initialDelaySeconds: 100
          timeoutSeconds: 10
          periodSeconds: 5
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /swagger-ui.html
            port: 8080
          initialDelaySeconds: 180
          timeoutSeconds: 10
          periodSeconds: 1
          failureThreshold: 5
        name: cdd
        ports:
        - containerPort: 8080
          protocol: TCP
        resources:
          requests:
              cpu: 100m
              memory: 1Gi
          limits:
              memory: 1Gi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      # run on big memory machine
      nodeSelector:
        eks.amazonaws.com/nodegroup: essential-services
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    run: cdd
  name: cdd
  selfLink: /api/v1/namespaces/default/services/cdd
spec:
  ports:
  - port: 80
    name: http
    targetPort: 8080
  selector:
    run: cdd
  type: ClusterIP
